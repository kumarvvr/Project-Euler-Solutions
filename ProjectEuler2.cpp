//=========================================================
// Name        : ProjectEuler2.cpp
// Author      : Kumar
// Version     :
// Copyright   : CopyLeft
// Description : Solution to ProjectEuler#2
// Problem Description:
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.
//==========================================================

#include <iostream>
using namespace std;

int main() {
	int maxn = 4000000; 		// The maximum number defined in the problem

	int f1=1; 			// The first term in the Fibonacci series.

	int f2=2; 			// Second term

	int curf; 			// The third tirm, also the term we will be
					// tracing as the "current Fibonacci number"

	int reqSum=2; 			// The required sum. It is = 2 as the second term is even
					// and I'm setting the While loop to start from curf

	curf = f1+f2; 			// The third term is the sum of previous two terms.

	while(curf<maxn)		// loop till the max limit
	    {
		if(curf%2 == 0)		// Check whether the current f. term is even, if so add it to
		    reqSum+=curf;	// the required sum.

		f1=f2;			// Update the fibonacci series..
		f2=curf;
		curf=f1+f2;
	    }

	cout<< " Sum of numbers in a fibonacci series upto 4000000 which are even is :" << reqSum;
	return 0;
}
